#!/usr/bin/env python3

import os
import sys
import glob
import fileinput
import datetime


def follow_symlink(path):
    if os.path.islink(path):
        return follow_symlink(os.readlink(path))
    return path


def get_path():
    first_location = os.path.abspath(__file__)
    real_location = follow_symlink(first_location)
    return os.path.dirname(real_location)


def get_serial(current, reset=False):
    date = int(datetime.date.today().strftime('%Y%m%d'))
    if reset or int(current[0:8]) < date:
        return '{}00'.format(date)
    else:
        return '{}'.format(int(current)+1)


def bump_serials(reset=False):
    for zone in glob.glob('*.zone'):
        edited = False
        for line in fileinput.input(zone, inplace=True):
            if edited is False and '; serial number' in line:
                current_serial = line.split(None, 1)[0]
                new_serial = get_serial(current_serial, reset=reset)
                print('  {0} ; serial number'.format(new_serial))
                edited = True
            else:
                print(line.rstrip())
        print('Bumped {0} to {1} for {2}'.format(
            current_serial,
            new_serial,
            zone
        ))


def update_NSD():
    print('Updating NSD')
    os.system('nsdc rebuild')
    os.system('nsdc reload')
    os.system('nsdc notify')


def push_repo():
    print('Pushing to git')
    os.system("git commit -am 'Autocommit: {0}'".format(datetime.date.today()))
    os.system("git push origin master")

os.chdir(get_path())
my_args = sys.argv[1:]
if 'reset' in my_args:
    bump_serials(reset=True)
elif 'bump' in my_args:
    bump_serials()
if 'update' in my_args:
    update_NSD()
if 'push' in my_args:
    push_repo()

